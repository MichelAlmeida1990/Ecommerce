// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  wishlist      WishlistItem[]
  addresses     Address[]
  cartItems     CartItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  parentId String?

  @@map("categories")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String    @db.Text
  shortDescription String?
  price       Decimal   @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  costPrice   Decimal?  @db.Decimal(10, 2)
  sku         String?   @unique
  barcode     String?
  weight      Decimal?  @db.Decimal(8, 3)
  dimensions  String?
  stock       Int       @default(0)
  minStock    Int       @default(0)
  maxStock    Int?
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  isNew       Boolean   @default(false)
  isOnSale    Boolean   @default(false)
  salePrice   Decimal?  @db.Decimal(10, 2)
  saleEndDate DateTime?
  metaTitle   String?
  metaDescription String?
  metaKeywords String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  
  images      ProductImage[]
  variants    ProductVariant[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  
  tags        Tag[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  stock     Int      @default(0)
  sku       String?  @unique
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("product_variants")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  color     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products Product[]

  @@map("tags")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  title     String?
  comment   String?  @db.Text
  isVerified Boolean @default(false)
  isActive  Boolean  @default(true)
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  subtotal      Decimal       @db.Decimal(10, 2)
  tax           Decimal       @db.Decimal(10, 2) @default(0)
  shipping      Decimal       @db.Decimal(10, 2) @default(0)
  discount      Decimal       @db.Decimal(10, 2) @default(0)
  total         Decimal       @db.Decimal(10, 2)
  currency      String        @default("BRL")
  notes         String?       @db.Text
  trackingCode  String?
  estimatedDelivery DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  userId        String
  user          User          @relation(fields: [userId], references: [id])
  
  items         OrderItem[]
  shippingAddress Address     @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address    @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  
  payment       Payment?
  
  shippingAddressId String
  billingAddressId  String

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
  orderId   String
  productId String
  createdAt DateTime @default(now())

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("BRL")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?       @unique
  gateway       String?
  gatewayData   Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orderId      String        @unique
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Address {
  id           String   @id @default(cuid())
  type         AddressType
  firstName    String
  lastName     String
  company      String?
  address1     String
  address2     String?
  city         String
  state        String
  postalCode   String
  country      String   @default("Brasil")
  phone        String?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")

  @@map("addresses")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  productId String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  productId String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Coupon {
  id            String        @id @default(cuid())
  code          String        @unique
  type          CouponType
  value         Decimal       @db.Decimal(10, 2)
  minAmount     Decimal?      @db.Decimal(10, 2)
  maxUses      Int?
  usedCount    Int            @default(0)
  isActive      Boolean       @default(true)
  startsAt      DateTime?
  expiresAt     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("coupons")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletters")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  BANK_TRANSFER
  CASH
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

